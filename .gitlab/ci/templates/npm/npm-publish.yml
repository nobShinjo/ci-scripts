# Title: npm-publish.yml

# Description:
# This script is designed to publish Unity packages to the GitLab npm package registry.
# It is used in a GitLab CI/CD pipeline.
# It consists of three main stages:
#     1. prepare: Prepare the package
#     2. check: Check the version
#     3. publish: Publish the package
#
# Features:
#     - Copies necessary files for Unity custom packages, README.md, and CHANGELOG.md to create a distribution directory.
#     - Automatically updates the version based on the versionBumpHint in package.json.
#     - Automatically increments the version by comparing it with the already published version in the npm registry.
#     - Publishes the package to the GitLab npm package registry.
#     - Tags the commit with the new version number.

stages:
  - prepare
  - check
  - changelog
  - publish

variables:
  PACKAGE_NAME: "my-package-name"
  PACKAGE_JSON_PATH: "${PACKAGE_NAME}/package.json"
  PUBLISH_SOURCE_DIR: "Assets/${PACKAGE_NAME}"
  DIST_DIR: "dist"
  NPM_REGISTRY_URL: "https://${CI_SERVER_HOST}/api/v4/projects/${CI_PROJECT_ID}/packages/npm/"
  GIT_AUTHOR_NAME: "gitlab-ci"
  GIT_AUTHOR_EMAIL: "ci@example.com"

.default_before_script:
  image: "node:18-alpine"
  before_script:
    # Install necessary tools
    - apk add --no-cache jq curl git
    - echo "📦 Tool Versions:"
    - jq --version
    - curl --version | head -n1
    - git --version
    - npm -v

    # set -euo pipefail: Exit immediately if a command exits with a non-zero status.
    - set -euo pipefail
    - git config --global user.name "$GIT_AUTHOR_NAME"
    - git config --global user.email "$GIT_AUTHOR_EMAIL"

publish_upm_prepare:
  # This stage is preparing the package for publishing.
  # It copies the necessary files from the source directory to the dist directory.
  #     - Runtime/*:    Runtime files for the package.
  #     - Editor/*:     Editor files for the package.
  #     - Tests/*:      Test files for the package.
  #     - package.json: The package.json file for the package.
  #     - README.md:    The README file for the package.
  #     - CHANGELOG.md: The CHANGELOG file for the package.
  stage: prepare
  extends: .default_before_script
  script:
    # Check if the package.json file exists in the specified path
    - echo "🔍 Checking for package.json..."
    - |
      if [ ! -f "$PACKAGE_JSON_PATH" ]; then
        echo "⚠️  $PACKAGE_JSON_PATH not found. Skipping publish."
        exit 0
      fi

    # Remove the dist directory if it exists and create a new one
    - echo "🧹 Rebuilding $DIST_DIR..."
    - rm -rf "$DIST_DIR" && mkdir -p "$DIST_DIR"

    # Copy the necessary files to the dist directory
    - cp "$PACKAGE_JSON_PATH" "$DIST_DIR/package.json"
    - for f in README.md CHANGELOG.md; do [ -f "$f" ] && cp "$f" "$DIST_DIR/" || echo "⚠️ $f missing"; done
    - cp -r "$PUBLISH_SOURCE_DIR"/* "$DIST_DIR/" || echo "⚠️ No source files found in $PUBLISH_SOURCE_DIR"
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: on_success
    - when: manual

publish_upm_check_version:
  # This stage checks the version of the package to be published.
  # It compares the local version with the published version in the npm registry.
  # If the published version is ahead, it bumps the version based on the versionBumpHint in package.json.
  # If the published version is behind, it uses the local version.
  # It also updates the versionBumpHint in package.json to remove it after the version bump.
  # Finally, it saves the next version to a file for use in the publish stage.
  stage: check
  extends: .default_before_script
  needs: ["publish_upm_prepare"]
  script:
    # Run the version check and bump script
    - bash .gitlab/ci/scripts/npm/manage_package_version.sh "$DIST_DIR/package.json" "$DIST_DIR" "$NPM_REGISTRY_URL" "$NPM_TOKEN"
  artifacts:
    name: "next_version"
    paths:
      - .next_version
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: on_success
    - when: manual

update_changelog:
  stage: changelog
  extends: .default_before_script
  needs: ["publish_upm_check_version"]
  script:
    - VERSION=$(cat .next_version)
    - echo "🚀 Updating changelog for version: $VERSION"

    # Update CHANGELOG.md
    - bash .gitlab/ci/scripts/changelog/update_for_release.sh "$VERSION" "CHANGELOG.md"
    - cp CHANGELOG.md "$DIST_DIR/CHANGELOG.md"

    # Commit and push the updated changelog
    - echo "📦 Committing changes..."
    - git add CHANGELOG.md
    - git commit -m "docs: update changelog for tag $VERSION"
    - git push origin HEAD:$CI_COMMIT_REF_NAME

    - echo "🚀 Changelog updated successfully for version $VERSION"
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: on_success
    - when: manual

publish_upm_publish:
  # This stage publishes the package to the GitLab npm package registry.
  # It uses the version from the previous stage and publishes the package.
  # It also tags the commit with the new version number.
  # Finally, it checks if package.json was modified and commits the changes if necessary.
  # It pushes the changes to the main branch.
  stage: publish
  extends: .default_before_script
  needs: ["update_changelog"]
  script:
    - VERSION=$(cat .next_version)
    - echo "🚀 Publishing version: $VERSION"

    # Commit and push the changes to package.json if it was modified
    - echo "🔍 Checking if package.json was modified..."
    - |
      if git diff --exit-code "$PACKAGE_JSON_PATH"; then
        echo "✅ No changes to package.json"
      else
        echo "💡 Committing bumped package.json..."
        git add "$PACKAGE_JSON_PATH"
        git commit -m "chore(ci): bump version to $VERSION"
        git push origin "$CI_COMMIT_BRANCH"
      fi

    # Tag the commit with the new version number
    - echo "🏷️ Tagging: v$VERSION"
    - git tag "v$VERSION"
    - git push origin "v$VERSION"

    # Create .npmrc file for authentication with the GitLab npm registry
    - echo "🔑 Creating .npmrc file..."
    - echo "//${CI_SERVER_HOST}/api/v4/projects/${CI_PROJECT_ID}/packages/npm/:_authToken=${NPM_TOKEN}" > "$DIST_DIR/.npmrc"

    # Check to authenticate with the GitLab npm registry
    - cd "$DIST_DIR"
    - echo "🔑 Authenticating with GitLab npm registry..."
    - |
      npm whoami --registry="$NPM_REGISTRY_URL" --userconfig ".npmrc" || {
        echo "❌ Authentication failed";
        exit 1;
      }
    - echo "📦 Publishing to GitLab npm registry..."
    - npm publish --access=public --registry="$NPM_REGISTRY_URL" --userconfig ".npmrc"
    - echo "🧹 Cleaning up..."
    - rm -f .npmrc
    - cd ..
    - echo "✅ Published successfully!"
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: on_success
    - when: manual
