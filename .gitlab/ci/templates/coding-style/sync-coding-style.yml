stages:
  - fetch
  - update

include:
  - .gitlab/ci/templates/fetch/fetch-ci.yml
  - .gitlab/ci/templates/git/git-config.yml

variables:
  CODE_STYLE_REPO: "https://${CI_SERVER_HOST}/line-simulation/code-analysis-ruleset.git"

.sync_coding_style_before_script:
  variables: !reference [.git-config, variables]
  before_script:
    # Install git, configure GitLab CI job token, and update CA certificates.
    - !reference [.git-config, before_script]
    # Install necessary tools
    - |
      apk add --no-cache bash > /dev/null 2>&1
      echo "üì¶ Tool Versions:"
      echo "bash version $(bash --version | head -n1 | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')"

fetch_ci_for_sync_coding_style:
  # This job is responsible for fetching the CI scripts from the ci-scripts repository.
  # It clones the ci-scripts repository, copies the necessary files to the current directory.
  # This ensures that the latest CI scripts are always used.  stage: fetch
  stage: fetch
  image: "alpine:latest"
  extends:
    - .fetch_ci
  before_script:
    # Install git, configure GitLab CI job token, and update CA certificates.
    - !reference [.git-config, before_script]
  only:
    - schedules

sync-editorconfig:
  stage: update
  image: alpine:latest
  needs: [fetch_ci_for_sync_coding_style]
  extends:
    - .sync_coding_style_before_script
  script:
    # Clone code-analysis-ruleset repository
    - |
      echo "üîÉ Coding Style Syncing..."
      echo "üì• Cloning code-analysis-ruleset repository..."
      TEMP_DIR=$(mktemp -d)
      git clone --depth=1 --branch main ${CODE_STYLE_REPO} ${TEMP_DIR}

    # Generate .editorconfig using the script
    - |
      echo "üî® Generating .editorconfig file..."
      cd ${TEMP_DIR}
      if [ ! -f "generate_editorconfig.sh" ]; then
        echo "‚ùå Error: generate_editorconfig.sh script not found"
        exit 1
      fi
      bash generate_editorconfig.sh
      cd ${CI_PROJECT_DIR}
      echo "‚úÖ Successfully generated .editorconfig file"

    # Define files to be copied
    - |
      FILES_TO_COPY="${TEMP_DIR}/.editorconfig ${TEMP_DIR}/stylecop.json ${TEMP_DIR}/Directory.build.props"
      for file in ${FILES_TO_COPY}; do
        if [ ! -f "${file}" ]; then
          echo "‚ùå Error: ${file} not found in code-analysis-ruleset"
          exit 1
        fi
      done

    # Copy files to target branches (main and feature/*)
    # Get remote branches matching the pattern feature/*,
    # and loop through each branch and copy the files.
    - |
      echo "üìã Copying files to target branches..."

      function copy_to_branch() {
        local branch=$1
        local files=$2
        echo "üîÑ Copying files to branch ${branch}..."
        git checkout ${branch}
        for file in ${files}; do
          cp ${file} .
          git add $(basename ${file})
        done
        if git diff --staged --quiet; then
          echo "‚ÑπÔ∏è No changes to commit for branch ${branch}, skipping..."
        else
          echo "‚úèÔ∏è Committing changes to ${branch}..."
          git commit -m "chore(coding-style): Update coding style files [ci skip]"
          git push origin "${branch}"
        fi
      }

      copy_to_branch main "${FILES_TO_COPY}"
      REMOTE_BRANCHES=$(git branch -r | grep -E "origin/feature/" | sed 's/origin\///')
      for BRANCH in ${REMOTE_BRANCHES}; do
        copy_to_branch ${BRANCH} "${FILES_TO_COPY}"
      done

    # Cleanup
    - |
      echo "üßπ Cleaning up temporary directory..."
      rm -rf ${TEMP_DIR}
      echo "‚úÖ Sync completed successfully"
  only:
    - schedules
