# Title: generate-changelog.yml
#
# Description:
# This script is designed to generate and manage changelogs using git-cliff.
# It is used in a GitLab CI/CD pipeline.
# It consists of four main stages:
#     1. draft: Generate a draft changelog.
#     2. merge: Merge the draft into CHANGELOG.md.
#     3. release: Generate the final changelog.
#     4. update_tag: Update the changelog for a new tag.
#
# Features:
#     - Generates a draft changelog based on commit messages using git-cliff.
#     - Merges the draft into CHANGELOG.md.
#     - Generates a final changelog for the release using git-cliff.
#     - Updates the changelog for a new tag.

stages:
  - draft
  - merge
  - release
  - update_tag

variables:
  GIT_AUTHOR_NAME: "gitlab-ci"
  GIT_AUTHOR_EMAIL: "ci@example.com"
  CLIFF_CONFIG_PATH: ".gitlab/ci/config/.cliff.toml"

.default_before_script:
  image: alpine:latest
  before_script:
    - apk add --no-cache git git-cliff
    - echo "📦 Tool Versions:"
    - git --version
    - git-cliff --version

    # set -euo pipefail: Exit immediately if a command exits with a non-zero status.
    - set -euo pipefail
    - git config --global user.name "$GIT_AUTHOR_NAME"
    - git config --global user.email "$GIT_AUTHOR_EMAIL"

generate_changelog_draft:
  stage: draft
  extends: .default_before_script
  script:
    - echo "📝 Generating changelog draft..."

    # Ensure .cliff.toml exists (fail fast)
    - |
      if [ ! -f "$CLIFF_CONFIG_PATH" ]; then
        echo "❌ $CLIFF_CONFIG_PATH not found. Aborting."
        exit 1
      fi

    # Fetch main branch for comparison
    - echo "📥 Fetching origin/main..."
    - git fetch origin main

    # Generate changelog draft
    - git-cliff --unreleased --config $CLIFF_CONFIG_PATH > .changelog_draft.md
    - echo "✅ Draft generated at .changelog_draft.md"
    - echo "📌 Please review the draft changelog."
  artifacts:
    name: "changelog-draft"
    paths:
      - .changelog_draft.md
    expire_in: 1 week

  rules:
    # Execute only if:
    # 1. It's a merge request
    # 2. The source branch is feature/*
    # 3. .cliff.toml exists
    - if: "$CI_MERGE_REQUEST_IID"
      when: on_success
    - if: '$CI_COMMIT_BRANCH =~ /^feature\//'
      when: on_success
    - exists:
        - "$CLIFF_CONFIG_PATH"
      when: on_success
    # Manual trigger for other branches
    - when: manual
    # Skip this job unless all conditions above are satisfied
    - when: never

merge_changelog_draft:
  stage: merge
  extends: .default_before_script
  script:
    - echo "📝 Merging changelog draft into CHANGELOG.md..."

    # Merge the draft into CHANGELOG.md
    - bash .gitlab/ci/scripts/merge_draft_into_changelog.sh

    # Commit & push updated CHANGELOG.md
    - git add CHANGELOG.md
    - git commit -m "docs: update changelog"
    - git push origin "$CI_COMMIT_BRANCH"
    - echo "✅ Changelog merged into CHANGELOG.md"
  rules:
    # Execute only if:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_PIPELINE_SOURCE'
      exists:
        - .changelog_draft.md
      when: on_success
    # Manual trigger for other branches
    - when: manual
    # Skip otherwise
    - when: never

generate_changelog_release:
  stage: release
  extends: .default_before_script
  script:
    - echo "📝 Generating final changelog..."

    - |
      if [ ! -f "$CLIFF_CONFIG_PATH" ]; then
        echo "❌ $CLIFF_CONFIG_PATH not found. Aborting."
        exit 1
      fi

    # Fetch main branch for comparison
    - echo "📥 Fetching origin/main..."
    - git fetch origin main

    # Generate final changelog
    - git-cliff --config $CLIFF_CONFIG_PATH  > CHANGELOG.md
    - echo "✅ Final changelog generated at CHANGELOG.md"
    - echo "📌 Please review the final changelog."
  artifacts:
    name: "changelog-release"
    paths:
      - CHANGELOG.md
    expire_in: 1 week
  rules:
    - when: manual

update_changelog_for_tag:
  stage: update_tag
  extends: .default_before_script
  script:
    - echo "🏷️ Updating changelog for new tag..."

    # Update CHANGELOG.md for the new tag
    - bash .gitlab/ci/scripts/update_changelog_for_tag.sh

    # Commit and push the updated changelog
    - echo "📦 Committing changes..."
    - LATEST_TAG=$(git describe --tags --abbrev=0)
    - git add CHANGELOG.md
    - git commit -m "docs: update changelog for tag $LATEST_TAG"
    - git push origin HEAD:$CI_COMMIT_REF_NAME

    - echo "🚀 Changelog updated successfully for tag $LATEST_TAG"
  rules:
    # Execute only when a new tag is created
    - if: $CI_COMMIT_TAG
      when: on_success
    # Manual trigger for other branches
    - when: manual
    # Skip otherwise
    - when: never
