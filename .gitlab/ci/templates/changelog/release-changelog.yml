# Title: changelog/release-changelog.yml
#
# Description:
# This script is designed to generate and manage changelogs using git-cliff.
# It is used in a GitLab CI/CD pipeline.
# It consists of one main stage:
#     1.fetch: Fetch CI scripts from the ci-scripts repository.
#     2.release: Generate a final changelog for the release.
#
# Features:
#     - Generates a final changelog for the release using git-cliff.

stages:
  - fetch
  - release

variables:
  CLIFF_CONFIG_PATH: ".gitlab/ci/config/.cliff.toml"
  CHANGELOG_FILE: "CHANGELOG.md"
  # NOTE: GIT_DEPTH is set to 0 to fetch all history for changelog generation.
  GIT_DEPTH: 0

include:
  - .gitlab/ci/templates/fetch/fetch-ci.yml
  - .gitlab/ci/templates/git/git-config.yml

.default_before_script:
  variables: !reference [.git-config, variables]
  before_script:
    # Install git, configure GitLab CI job token, and update CA certificates.
    - !reference [.git-config, before_script]
    # Install necessary tools
    - |
      apk add --no-cache git-cliff bash > /dev/null 2>&1
      echo "üì¶ Tool Versions:"
      git-cliff --version
      echo "bash version $(bash --version | head -n1 | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')"

fetch_ci_for_changelog_for_release:
  # This job is responsible for fetching the CI scripts from the ci-scripts repository.
  # It clones the ci-scripts repository, copies the necessary files to the current directory.
  # This ensures that the latest CI scripts are always used.  stage: fetch
  stage: fetch
  image: "alpine:latest"
  extends:
    - .fetch_ci
  before_script:
    # Install git, configure GitLab CI job token, and update CA certificates.
    - !reference [.git-config, before_script]
  rules:
    # Manual trigger for other branches.
    - if: $CI_COMMIT_REF_NAME != $CI_DEFAULT_BRANCH
      when: manual
      allow_failure: true

generate_changelog_release:
  stage: release
  image: "alpine:latest"
  extends:
    - .default_before_script
  needs: [fetch_ci_for_changelog_for_release]
  script:
    # Release changelog generation
    - |
      echo "üîç Checking for .cliff.toml..."
      if [ ! -f "$CLIFF_CONFIG_PATH" ]; then
        echo "‚ùå $CLIFF_CONFIG_PATH not found. Aborting."
        exit 1
      fi
    # Fetch main branch for comparison
    - |
      echo "üì• Fetching origin/$CI_DEFAULT_BRANCH..."
      git fetch origin $CI_DEFAULT_BRANCH
    # Generate final changelog
    - |
      echo "üìù Generating final changelog..."
      git-cliff --config $CLIFF_CONFIG_PATH  > $CHANGELOG_FILE
      echo "üìú Final changelog generated in $CHANGELOG_FILE."
    # Check for changes in the CHANGELOG.md, and commit if there are any.
    - |
      echo "üîç Checking for changes in $CHANGELOG_FILE..."
      if [ -n "$(git ls-files --others --exclude-standard -- "$CHANGELOG_FILE")" ]; then
        echo "üÜï $CHANGELOG_FILE is a new file. Committing..."
        git add $CHANGELOG_FILE
        git commit -m "docs(ci): add new changelog [ci skip]"
        git push -o ci.skip origin HEAD:$CI_COMMIT_REF_NAME
        echo "üöÄ Changelog committed successfully (new file)"
      elif ! git diff --quiet "$CHANGELOG_FILE"; then
        echo "‚úèÔ∏è $CHANGELOG_FILE was modified. Committing..."
        git add $CHANGELOG_FILE
        git commit -m "docs(ci): update changelog [ci skip]"
        git push -o ci.skip origin HEAD:$CI_COMMIT_REF_NAME
        echo "üöÄ Changelog updated successfully"
        echo "üìå Please review the final changelog."
      else
        echo "‚ÑπÔ∏è No changes in $CHANGELOG_FILE, skipping commit."
        exit 0
      fi
  artifacts:
    paths:
      - $CHANGELOG_FILE
    when: always
    expire_in: 1 week
  rules:
    # Manual trigger for other branches.
    - if: $CI_COMMIT_REF_NAME != $CI_DEFAULT_BRANCH
      when: manual
      allow_failure: true
