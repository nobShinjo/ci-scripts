# Title: changelog/draft-changelog.yml
#
# Description:
# This script is designed to generate a draft changelog using git-cliff.
# It is used in a GitLab CI/CD pipeline.
# It consists of one main stage:
#     1. fetch: Fetch CI scripts from the ci-scripts repository.
#     2. draft: Generate a draft changelog based on commit messages.
#
# Features:
#     - Generates a draft changelog based on commit messages using git-cliff.
#     - The draft is generated in the CHANGELOG.md file. (with --prepend option)
#     - The draft is generated only for merge requests and feature branches.
#     - The draft is generated only if the .cliff.toml file exists.
#     - The draft is generated only if the job is triggered manually or automatically.

stages:
  - fetch
  - draft

variables:
  CLIFF_CONFIG_PATH: ".gitlab/ci/config/.cliff.toml"
  CHANGELOG_FILE: "CHANGELOG.md"
  # NOTE: GIT_DEPTH is set to 0 to fetch all history for changelog generation.
  GIT_DEPTH: 0

include:
  - .gitlab/ci/templates/fetch/fetch-ci.yml
  - .gitlab/ci/templates/git/git-config.yml

.default_before_script:
  variables: !reference [.git-config, variables]
  before_script:
    # Install git, configure GitLab CI job token, and update CA certificates.
    - !reference [.git-config, before_script]
    # Install necessary tools
    - |
      apk add --no-cache git-cliff bash > /dev/null 2>&1
      echo "üì¶ Tool Versions:"
      git-cliff --version
      echo "bash version $(bash --version | head -n1 | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')"

.draft_changelog_default_rules:
  rules:
    # Execute only if the pipeline is triggered by a merge request.
    - if: >
        $CI_MERGE_REQUEST_IID &&
        $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "$CI_DEFAULT_BRANCH" &&
        $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^feature\//
      when: on_success
    # Manual trigger for other branches.
    - when: never
      allow_failure: false

fetch_ci_for_changelog:
  # This job is responsible for fetching the CI scripts from the ci-scripts repository.
  # It clones the ci-scripts repository, copies the necessary files to the current directory.
  # This ensures that the latest CI scripts are always used.  stage: fetch
  stage: fetch
  image: "alpine:latest"
  extends:
    - .draft_changelog_default_rules
    - .fetch_ci
  before_script:
    # Install git, configure GitLab CI job token, and update CA certificates.
    - !reference [.git-config, before_script]

generate_feature_branch_changelog_draft:
  stage: draft
  image: "alpine:latest"
  extends:
    - .default_before_script
    - .draft_changelog_default_rules
  needs: [fetch_ci_for_changelog]
  script:
    # Generate changelog draft using git-cliff.
    - |
      echo "üîç Checking for .cliff.toml..."
      # Ensure .cliff.toml exists (fail fast).
      if [ ! -f "$CLIFF_CONFIG_PATH" ]; then
        echo "‚ùå $CLIFF_CONFIG_PATH not found. Aborting."
        exit 1
      fi
    # Fetch main branch for comparison.
    - |
      echo "üì• Fetching origin/$CI_DEFAULT_BRANCH..."
      git fetch origin $CI_DEFAULT_BRANCH
    # Ensure CHANGELOG_FILE exists for --prepend
    - |
      echo "üóÇÔ∏è Ensuring $CHANGELOG_FILE exists..."
      touch "$CHANGELOG_FILE"
    # Generate Unreleased draft changelog.
    # NOTE: --prepend is used to prepend the changelog draft to the existing CHANGELOG.md file.
    - |
      echo "üìù Generating changelog draft..."
      git-cliff \
      --unreleased \
      --config $CLIFF_CONFIG_PATH \
      --prepend \
      "$CHANGELOG_FILE"
      echo "üìú Changelog draft generated in $CHANGELOG_FILE."
    # Check for changes in the changelog draft.
    - |
      echo "üîÑ Checking for changes in $CHANGELOG_FILE..."
      if git diff --exit-code $CHANGELOG_FILE; then
        echo "‚ÑπÔ∏è No changes in $CHANGELOG_FILE, skipping commit."
        exit 0
      fi
    # Commit & push changes.
    - |
      echo "üì¶ Committing changes..."
      git add $CHANGELOG_FILE
      git commit -m "docs: update changelog draft [ci skip]"
      git push -o ci.skip origin HEAD:$CI_COMMIT_REF_NAME
      echo "üì¶ Pushed changes to $CI_COMMIT_REF_NAME."
      echo "‚úÖ Changelog draft committed successfully."
      echo "üìå Please review the draft changelog."
  artifacts:
    paths:
      - $CHANGELOG_FILE
    when: always
    expire_in: 1 week
