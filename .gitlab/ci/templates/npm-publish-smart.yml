stages:
  - prepare
  - check
  - publish

variables:
  PACKAGE_NAME: "my-package-name"
  PACKAGE_JSON_PATH: "${PACKAGE_NAME}/package.json"
  PUBLISH_SOURCE_DIR: "Assets/${PACKAGE_NAME}"
  DIST_DIR: "dist"
  GITLAB_URI: "https://gitlab.local/"
  PROJECT_ID: "1234"
  NPM_REGISTRY_URL: "${GITLAB_URI}api/v4/projects/${PROJECT_ID}/packages/npm/"
  GIT_AUTHOR_NAME: "gitlab-ci"
  GIT_AUTHOR_EMAIL: "ci@example.com"

.default_before_script:
  before_script:
    - apk add --no-cache jq curl git
    - set -euo pipefail
    - git config --global user.name "$GIT_AUTHOR_NAME"
    - git config --global user.email "$GIT_AUTHOR_EMAIL"

publish_upm_prepare:
  stage: prepare
  extends: .default_before_script
  script:
    - echo "üîç Checking for package.json..."
    - |
      if [ ! -f "$PACKAGE_JSON_PATH" ]; then
        echo "‚ö†Ô∏è  $PACKAGE_JSON_PATH not found. Skipping publish."
        exit 0
      fi

    - echo "üßπ Rebuilding $DIST_DIR..."
    - rm -rf "$DIST_DIR" && mkdir -p "$DIST_DIR"

    - cp "$PACKAGE_JSON_PATH" "$DIST_DIR/package.json"
    - '[ -f "README.md" ] && cp README.md "$DIST_DIR/" || echo "‚ö†Ô∏è README.md missing"'
    - '[ -f "CHANGELOG.md" ] && cp CHANGELOG.md "$DIST_DIR/" || echo "‚ö†Ô∏è CHANGELOG.md missing"'
    - cp -r "$PUBLISH_SOURCE_DIR"/* "$DIST_DIR/" || echo "‚ö†Ô∏è No source files found in $PUBLISH_SOURCE_DIR"
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

publish_upm_check_version:
  stage: check
  extends: .default_before_script
  needs: ["publish_upm_prepare"]
  script:
    - echo "üîç Reading package info..."
    - CURRENT_VERSION=$(jq -r .version "$DIST_DIR/package.json")
    - PACKAGE_NAME=$(jq -r .name "$DIST_DIR/package.json")
    - echo "üì¶ Package: $PACKAGE_NAME"
    - echo "üî¢ Local version: $CURRENT_VERSION"

    - BUMP_TYPE=$(jq -r '.versionBumpHint // "patch"' "$DIST_DIR/package.json")
    - echo "üìà Bump type: $BUMP_TYPE"

    # GitLab requires @scope/pkg as %40scope%2Fpkg
    # %40 is the URL-encoded version of @
    # %2F is the URL-encoded version of /
    - PACKAGE_PATH_ESCAPED=$(echo "$PACKAGE_NAME" | sed 's/@/%40/' | sed 's/\//%2F/')
    - PACKAGE_INFO_URL="${NPM_REGISTRY_URL%-*}/npm/${PACKAGE_PATH_ESCAPED}"

    - echo "üåê Checking published version..."
    - |
      PUBLISHED_VERSION=$(curl -s --header "PRIVATE-TOKEN: ${NPM_TOKEN}" "$PACKAGE_INFO_URL" | jq -r '.versions | keys | last')

      if [ -z "$PUBLISHED_VERSION" ]; then
        echo "üÜï Not yet published. Using local version."
        echo "$CURRENT_VERSION" > .next_version
      elif [ "$PUBLISHED_VERSION" == "$CURRENT_VERSION" ]; then
        echo "üîÅ Already published. Bumping $BUMP_TYPE..."

        # bump version
        NEXT_VERSION=$(npm --no-git-tag-version version "$BUMP_TYPE" --prefix "$DIST_DIR" | sed 's/v//')

        # delete versionBumpHint
        jq 'del(.versionBumpHint)' "$DIST_DIR/package.json" > "$DIST_DIR/package.tmp.json" && \
        mv "$DIST_DIR/package.tmp.json" "$DIST_DIR/package.json"

        echo "$NEXT_VERSION" > .next_version
      else
        echo "‚úÖ Version ahead. Using local version."
        echo "$CURRENT_VERSION" > .next_version
      fi
  artifacts:
    name: "next_version"
    paths:
      - .next_version
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

publish_upm_publish:
  stage: publish
  extends: .default_before_script
  needs: ["publish_upm_check_version"]
  script:
    - VERSION=$(cat .next_version)
    - echo "üöÄ Publishing version: $VERSION"

    - cd "$DIST_DIR"
    - echo "//gitlab.local/api/v4/projects/1234/packages/npm/:_authToken=${NPM_TOKEN}" > .npmrc
    - npm publish --access=public

    - cd ..
    - echo "üè∑Ô∏è Tagging: v$VERSION"
    - git tag "v$VERSION"
    - git push origin "v$VERSION"

    - echo "üîç Checking if package.json was modified..."
    - |
      if git diff --exit-code "$PACKAGE_JSON_PATH"; then
        echo "‚úÖ No changes to package.json"
      else
        echo "üí° Committing bumped package.json..."
        git add "$PACKAGE_JSON_PATH"
        git commit -m "chore: bump version to $VERSION"
        git push origin "$CI_COMMIT_BRANCH"
      fi
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
