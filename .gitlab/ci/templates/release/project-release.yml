# Title: project-release.yml
#
# Description:
# This script is designed to create a release for your project on GitLab.
# It is used in a GitLab CI/CD pipeline.
# It consists of four main stages:
#     1. fetch: Fetch the CI scripts from the ci-scripts repository.
#     2. prepare: Bump the version of the project based on the VERSION.yml file.
#     3. update: Update the changelog based on the new version number.
#     4. release: Create a release on GitLab with the new version number.
#
# Features:
#     - Automatically update the version based on the VERSION.yml file.
#     - Automatically increment the version by comparing it with the already released version in the GitLab Releases.
#     - Create a release on GitLab with the new version number.
#     - Tag the commit with the new version number.

stages:
  - fetch
  - prepare
  - update
  - release

include:
  - .gitlab/ci/templates/fetch/fetch-ci.yml
  - .gitlab/ci/templates/git/git-config.yml

variables:
  VERSION_FILE: "VERSION.yml"

.default_before_script:
  variables: !reference [.git-config, variables]
  before_script:
    # Install git, configure GitLab CI job token, and update CA certificates.
    - !reference [.git-config, before_script]
    # Install necessary tools
    - |
      echo "üì¶ Install necessary tools for project-release..."
      apk add --no-cache bash yq > /dev/null 2>&1
      echo "üì¶ Tool Versions:"
      yq --version
      bash --version

.default_rules:
  rules:
    # This job will run only on the default branch (e.g., main or master).
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: on_success
    # This job will run manually for other branches.
    - when: manual

fetch_ci:
  # This job is responsible for fetching the CI scripts from the ci-scripts repository.
  # It clones the ci-scripts repository, copies the necessary files to the current directory.
  # This ensures that the latest CI scripts are always used.  stage: fetch
  stage: fetch
  image: "alpine:latest"
  extends:
    - .default_rules
    - .fetch_ci
  before_script:
    # Install git, configure GitLab CI job token, and update CA certificates.
    - !reference [.git-config, before_script]

bump_version:
  # This stage is responsible for bumping the version of the project.
  # It uses a script to read the VERSION.yml file and update the version accordingly.
  # The script also creates a .next_version file that contains the new version number.
  # The .next_version file is used in the changelog stage to update the changelog.
  # The script also commits the changes to the VERSION.yml file and pushes them to the repository.
  stage: prepare
  image: "alpine:latest"
  extends:
    - .default_before_script
    - .default_rules
  needs: ["fetch_ci"]
  script:
    - |
      echo "üîç Checking for $VERSION_FILE"
      bash .gitlab/ci/scripts/release/manage_version.sh $VERSION_FILE
      echo "‚úÖ Bumped version to $(cat .next_version)"
  artifacts:
    name: "next_version"
    paths:
      - .next_version
    expire_in: 1 day

update_changelog:
  # This stage is responsible for updating the changelog.
  # It uses a script to read the .next_version file and update the changelog accordingly.
  # The script also commits the changes to the CHANGELOG.md file and pushes them to the repository.
  stage: update
  image: "alpine:latest"
  extends:
    - .default_before_script
    - .default_rules
  needs: ["fetch_ci", "bump_version"]
  script:
    # Update CHANGELOG.md
    - |
      VERSION=$(cat .next_version)
      echo "üöÄ Updating changelog for version: $VERSION"
      bash .gitlab/ci/scripts/changelog/update_for_release.sh "$VERSION" "$CHANGELOG_FILE"
    # Commit and push the updated changelog
    - |
      echo "üì¶ Committing changes..."
      git add $CHANGELOG_FILE
      git commit -m "docs: update changelog for tag $VERSION [ci skip]"
      git push -o ci.skip origin HEAD:$CI_COMMIT_REF_NAME --force-with-lease
      echo "üöÄ Changelog updated successfully for version $VERSION"
  artifacts:
    name: "next_version"
    paths:
      - .next_version
    expire_in: 1 day

create_release:
  # This stage is responsible for creating a release on GitLab.
  # It uses the release-cli tool to create a release with the new version number.
  # The release is created with the tag name and description from the CHANGELOG.md file.
  # The release is created only when a tag is created.
  # The release is created with the new version number and the changelog as the description.
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  extends:
    - .default_before_script
    - .default_rules
  needs: ["fetch_ci", "update_changelog"]
  script:
    - |
      VERSION=$(cat .next_version)
      echo "üöÄ Creating release for version: v$VERSION"
    # Check if the release already exists
    - |
      if git rev-parse --verify "v$VERSION" >/dev/null 2>&1; then
        echo "üö´ Release v$VERSION already exists. Skipping release creation."
        exit 0
      fi
    # Generate release notes from CHANGELOG.md
    - |
      echo "üìú Generating release notes..."
      bash .gitlab/ci/scripts/release/generate_release_note.sh "$CHANGELOG_FILE" ".release_note"
      echo "üì¶ Creating release description..."
      echo "Release notes for v$VERSION" > .release_description
      printf "\n---\n" >> .release_description
      cat .release_note >> .release_description
    # Tag the commit with the new version number
    - |
      echo "üè∑Ô∏è Tagging: v$VERSION"
      git tag "v$VERSION"
      git push -o ci.skip origin "v$VERSION"
    # Create the release on GitLab
    # See https://docs.gitlab.com/ee/ci/yaml/#release for available properties
    - |
      echo "üöÄ Creating release on GitLab..."
      release-cli create \
      --name "v$VERSION" \
      --tag-name "v$VERSION" \
      --description-file ./.release_description
      echo "‚úÖ Release created successfully for version v$VERSION"
  artifacts:
    name: "release_description"
    paths:
      - .release_description
    expire_in: 1 day
