# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration

# ================================================================
# The configuration for the changelog generation.
# ================================================================
[changelog]
# The template used to generate the changelog.
# See: https://git-cliff.org/docs/category/templating
header = """
# Changelog\n
All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n
"""

body = """
{%- macro remote_url() -%}
  {# get_env(name="CI_PROJECT_URL") -#}
  https://gitlab.local/your-group/your-project
{%- endmacro -%}

{% if version -%}
  {# Trim the "v" prefix from the version to ensure consistency in version formatting. -#}
  ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else -%}
  ## [Unreleased]
{% endif -%}

{% for group, commits in commits | group_by(attribute="group") %}
  ### {{ group | upper_first }}

  {% for commit in commits %}
    {%- set msg = commit.message | split(pat="\n") | first | trim -%}
    - {{ msg | upper_first }} ({{ commit.id | truncate(length=7, end="") }})
  {% endfor -%}
{% endfor %}
"""

footer = """
{%- macro remote_url() -%}
  {# get_env(name="CI_PROJECT_URL") -#}
  https://gitlab.local/your-group/your-project
{%- endmacro -%}

{% for release in releases %}
  {% if release.version -%}
    {% if release.previous and release.previous.version %}
      Full Changelog: <{{ self::remote_url() }}/-/compare/{{ release.previous.version }}...{{ release.version }}> \n
      [{{ release.version | trim_start_matches(pat="v") }}]: {{ self::remote_url() }}/-/releases/{{ release.version }} \n\n
    {% endif -%}
  {% else -%}
    {% if release.previous and release.previous.version %}
      [unreleased]: {{ self::remote_url() }}/-/compare/{{ release.previous.version }}...HEAD
    {% else -%}
      [unreleased]: {{ self::remote_url() }}/-/releases/unreleased
    {% endif -%}
  {% endif -%}
{% endfor %}
---\n
<!-- generated by git-cliff -->
"""

# Leading and trailing whitespace are removed from the body.
trim = true

# The changelog body will be rendered even if there are no release to process.
render_always = true


# ================================================================
# Git related configuration.
# ================================================================
[git]
# Commits are parsed according to the Conventional Commits format.
# See: https://www.conventionalcommits.org/en/v1.0.0/
conventional_commits = true

# Commits that are not conventional are excluded.
filter_unconventional = false

# All commits included in the changelog must be conventional.
require_conventional = false

# Each line of a commit is processed individually, as if it were own commit message.
split_commits = false

# Processors are used to modify commit messages before parsing them.
# See: https://git-cliff.org/docs/configuration/git#commit_preprocessors
commit_preprocessors = []

# An array of commit parsers for determining the commit groups by using regex.
# This configuration maps Conventional Commits format to Keep a Changelog format.
# **Keep a Changelog format**
# <https://keepachangelog.com/en/1.1.0/>
# - Added: for new features
# - Changed: for changes in existing functionality
# - Deprecated: for features soon to be removed
# - Removed: for removed features
# - Fixed: for bug fixes
# - Security: for vulnerability fixes
#
# **Conventional Commits types**
# <https://www.conventionalcommits.org/en/v1.0.0/#summary>
#  - build: changes affecting build system or external dependencies
#  - chore: routine tasks, maintenance, or dependency updates
#  - ci: changes to CI configuration and scripts
#  - docs: documentation changes only
#  - feat: new feature implementation
#  - fix: bug fixes
#  - perf: performance improvements
#  - refactor: code changes that neither fix bugs nor add features
#  - revert: reverting previous changes
#  - style: formatting, missing semicolons, etc; no code change
#  - test: adding or correcting tests
commit_parsers = [
  # Ignore rules
  { message = "^Merge (branch|remote-tracking branch|pull request)", skip = true },
  { message = "^Merge ![0-9]+", skip = true },
  { message = "^bump:", skip = true },
  { message = "^(\\[)?skip( ci)?(\\])?", skip = true },

  # Keep a Changelog groups
  ## Breaking changes
  { message = "^\\w+(\\([^)]*\\))?!:", group = "Breaking" },
  { body = "(?i)BREAKING[ -]CHANGE", group = "Breaking" },

  { message = "^feat", group = "Added" },

  { message = "^style", group = "Changed" },
  { message = "^refactor", group = "Changed" },
  { message = "^perf", group = "Changed" },
  { message = "^test", group = "Changed" },
  { message = "^build", group = "Changed" },
  { message = "^ci", group = "Changed" },
  { message = "^chore", group = "Changed" },

  { body = "(?i)deprecat(ed|e)", group = "Deprecated" },

  { message = "^fix", group = "Fixed" },
  { message = "^docs", group = "Documentation" },
  { message = "^revert", group = "Reverted" },
  { message = "^security", group = "Security" },
  { body = "(?i)\bsecurity\b", group = "Security" },

  # Catch-all rule for any other commit messages.
  { message = ".*", group = "Changed" },
]

# Commits that are not matched by commit_parsers are filtered out.
filter_commits = true

# A regular expression for matching the git tags.
tag_pattern = "^v[0-9]+\\.[0-9]+\\.[0-9]+$"

# A regex for ignore processing the matched tags.
ignore_tag_error = true

# Tags are processed in topological order instead of chronological.
topo_order = false

# Sort the commits inside sections by specified order.
sort_commits = "newest"

# An array of link parsers for extracting external references,m and turning them int URLs, using regex.
# See: https://git-cliff.org/docs/configuration/git#link_parsers
link_parsers = [
  # NOTE: The following link parsers are supported by GitLab:
  # GitLab issues and merge requests
  # { pattern = "#([0-9]+)", href = "https://gitlab.local/your-group/your-project/-/issues/{{ id }}" },
  # { pattern = "!([0-9]+)", href = "https://gitlab.local/your-group/your-project/-/merge_requests/{{ id }}" },
  # Git commit hashes
  # { pattern = "([0-9a-f]{7,40})", href = "https://gitlab.local/your-group/your-project/-/commit/{{ id }}" },
]
