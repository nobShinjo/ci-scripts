# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration

[changelog.remote]
url = "{{ ci_project_url | default(value='https://example.com') }}"

[changelog]
header = """
# Changelog\n
All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n
"""

body = """
{% if version -%}
  # Trim the "v" prefix from the version to ensure consistency in version formatting.
  ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else -%}
  ## [Unreleased]
{% endif -%}

{% for group, commits in commits | group_by(attribute="group") %}
  ### {{ group | upper_first }}
  {%- for commit in commits %}
    {%- set msg = commit.message | split(pat="\n") | first | trim -%}
    {%- set pr_match = msg | regex_search(pattern="!([0-9]+)") -%}
    {%- set issue_match = msg | regex_search(pattern="#([0-9]+)") -%}
    - {{ msg | upper_first }}
    - {{ msg | upper_first }}\
      {%- if commit.remote.username %} by @{{ commit.remote.username }}{%- endif -%}
      {%- if pr_match %}
        in [!{{ pr_match.1 }}]({{ remote_url }}/-/merge_requests/{{ pr_match.1 }})
      {%- elif issue_match %}
        in [#{{ issue_match.1 }}]({{ remote_url }}/-/issues/{{ issue_match.1 }})
      {%- endif %}
  {% endfor %}
{% endfor %}

{%- if gitlab.contributors | filter(attribute="is_first_time", value=true) | length != 0 %}
  ## New Contributors
{%- endif -%}

{% for contributor in gitlab.contributors | filter(attribute="is_first_time", value=true) %}
  * @{{ contributor.username }} made their first contribution
    {%- if contributor.pr_number %} in \
      [!{{ contributor.pr_number }}]({{ remote_url }}/-/merge_requests/{{ contributor.pr_number }}) \
    {%- endif %}
{%- endfor %}\n
"""

footer = """
{% for release in releases -%}
  {% if release.version -%}
    {% if release.previous.version -%}
      [{{ release.version | trim_start_matches(pat="v") }}]: \
        {{ remote_url }}/-/compare/{{ release.previous.version }}...{{ release.version }}
    {% endif -%}
  {% else -%}
    [unreleased]: {{ remote_url }}/-/compare/{{ release.previous.version }}...HEAD
  {% endif %}
{% endfor %}
<!-- generated by git-cliff -->
"""

# Remove unnecessary whitespace from the changelog output.
trim = true

# Commit messages use the Conventional Commits format.
# See: https://www.conventionalcommits.org/en/v1.0.0/
# Commit messages use the Conventional Commits format.
conventional_commits = true
# Allow commits that do not follow the Conventional Commits format.
filter_unconventional = false
# Enable filtering of commits.
filter_commits = true
# Sort Commits in chronological order, not topological order.
topo_order = false
# Create a changelog in the order of the latest commit.
sort_commits = "newest"

# Processors are used to modify commit messages before parsing them.
commit_preprocessors = []

# Map Conventional commit types to Keep a Changelog groups.
# **Keep a Changelog**
# <https://keepachangelog.com/ja/1.1.0/>
# - Added
# - Changed
# - Deprecated
# - Removed
# - Fixed
# - Security
#
# **Conventional Commits**
# <https://www.conventionalcommits.org/en/v1.0.0/#summary>
#  - build
#  - chore
#  - ci
#  - docs
#  - feat
#  - fix
#  - perf
#  - refactor
#  - revert
#  - style
#  - test
commit_parsers = [
  # Keep a Changelog groups
  { message = "^feat", group = "Added" },
  { message = "^fix", group = "Fixed" },
  { message = "^docs", group = "Changed" },
  { message = "^style", group = "Changed" },
  { message = "^refactor", group = "Changed" },
  { message = "^perf", group = "Changed" },
  { message = "^test", group = "Changed" },
  { message = "^build", group = "Changed" },
  { message = "^ci", group = "Changed" },
  { message = "^chore", group = "Changed" },
  { message = "^revert", group = "Removed" },
  { message = "^deprecated", group = "Deprecated" },
  { message = "^security", group = "Security" },
  { body = ".*security", group = "Security" },
  { message = ".*", group = "Changed" },
  # Ignore rules
  { message = "^Merge branch", group = "Ignore" },
  { message = "^Merge pull request", group = "Ignore" },
  { message = "^bump:", group = "Ignore" },
  { message = "^\\[skip\\]", group = "Ignore" },
  { message = "^\\[ci skip\\]", group = "Ignore" },
  { message = "^\\[skip ci\\]", group = "Ignore" },
]
